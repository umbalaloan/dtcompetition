plot(y=m.26_33@fit)
# Load library
library(TSA)
library(fUnitRoots)
library(lmtest)
forcast = ugarchforecast(m.22_2, data = diff.log.bc, n.ahead = 10, n.roll = 10)
library(rugarch)
summary(m.22)
m.22_3<-ugarchfit(spec=model,data=diff.log.bc)
m.26_33<-ugarchfit(spec=model,data=diff.log.bc)
predicted_values <- fitted(m.26_33)
predicted_values
m.26_33<-ugarchfit(spec=model,data=diff.log.bc)
diff.log.bc
forcast = ugarchforecast(m.26_33, data = diff.log.bc, n.ahead = 10)
forecasts <- forcast@forecast$seriesFor
forecasts
# Load library
library(TSA)
library(fUnitRoots)
library(lmtest)
library(rugarch)
bitcoin <- read.csv("Bitcoin_Historical_Price.csv")
rownames(bitcoin_ts) <- bitcoin$Date
#bitcoin_ts$bitcoin.Close <- as.numeric(as.character(bitcoin_ts$bitcoin.Close))
bitcoin_ts <- ts(as.vector(bitcoin_ts), start = c(2013,27,4), frequency = 365)
log.bc <- log(bitcoin_ts)
# Test with the first differenc
diff.log.bc <- (diff(log.bc, difference =1))
model<-ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3, 3)),
mean.model = list(armaOrder = c(2, 6), include.mean = FALSE),
distribution.model = "norm")
m.26_33<-ugarchfit(spec=model,data=diff.log.bc)
forcast = ugarchforecast(m.26_33, data = diff.log.bc, n.ahead = 10)
forecasts <- forcast@forecast$seriesFor
View(forecasts)
# Inverse difference
invDiffForcast <- diffinv(forecasts)
actual_Values <- exp(invDiffForcast)
View(actual_Values)
#  ARIMA(2,1,6) ARIMA(6,1,6)
model.216 <- arima(bitcoin_ts, order = c(2,1,6), method = 'ML')
plot(forecasts)
plot(forecast)
plot(forcast)
diff.log.bc
exp(forecasts)
log.bc
diff.log.bc
length(log.bc)
log.bc[2130]
View(invDiffForcast)
model<-ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(2, 6), include.mean = FALSE),
distribution.model = "norm")
m.26_11<-ugarchfit(spec=model,data=diff.log.bc)
forcast = ugarchforecast(m.26_11, data = diff.log.bc, n.ahead = 10)
forecasts <- forcast@forecast$seriesFor
# Inverse difference
invDiffForcast <- diffinv(forecasts)
# Log Transform
log.bc <- log(bitcoin_ts)
hist(bitcoin_ts, main = "Histogram of Bit Coin Series before transformation", xlab = "Bit Coin Price", cex.main=1)
hist(log.bc, main = "Histogram of Bit Coin Series after transformation", xlab = "Log Transform of Bit Coin")
residual.analysis(model = arima.1218, class = "ARIMA")
arima.1218 <- arima(bitcoin_ts, order = c(12,1,8))
coeftest(arima.1218)
residual.analysis(model = arima.1218, class = "ARIMA")
arima.617 <- arima(bitcoin_ts, order = c(6,1,7))
coeftest(arima.617)
eacf(ab.res.617)
ab.res.617 <- abs(arima.617$residuals)
eacf(ab.res.617)
sq.res.617 <- abs(arima.617$residuals)
sq.res.617 <- (arima.617$residuals)^2
eacf(sq.res.617)
checkMASE <- function(garchOrder, armaOrder, data_model, data.trans)
{
model <- modelfit(garchOrder, armaOrder, data_model)
forcRes = ugarchforecast(model, data = data_model, n.ahead = 10)
predicted_result <- fitted.values(forcRes, data.trans)
rs <- MASE(observed,predicted_result)$MASE
return(rs)
}
checkMASE(c(7,5), c(6,7), diff.log.bc, log.bc)
# This function is used to fiting model
modelfit <- function(garchOrder, armaOrder, data){
model <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = garchOrder),
mean.model = list(armaOrder = armaOrder, include.mean = FALSE),
distribution.model = "norm")
model.fit <- ugarchfit(spec=model,data=data, out.sample = 100)
return(model.fit)
}
checkMASE(c(7,5), c(6,7), diff.log.bc, log.bc)
checkMASE(c(7,5), c(6,7), diff.log.bc, log.bc)
checkMASE <- function(garchOrder, armaOrder, data_model, data.trans)
{
model <- modelfit(garchOrder, armaOrder, data_model)
forcRes = ugarchforecast(model, data = data_model, n.ahead = 10)
predicted_result <- fitted.values(forcRes, data.trans)
print(predicted_result)
rs <- MASE(observed,predicted_result)$MASE
return(rs)
}
checkMASE(c(7,5), c(6,7), diff.log.bc, log.bc)
# This function transform fitted residuals from forcasting ARIMA+GARCH model into fitted BitCoin Price
fitted.values <- function(forecastResult, transformed_series)
{
fitted.res <- forecastResult@forecast$seriesFor
invdiff <- diffinv(fitted.res)
latest_value <- transformed_series[length(transformed_series)]
fitted.value.list <- c()
for(i in 2:length(invdiff))
{
trans.fitted.value <- latest_value + invdiff[i]
fitted.value.list <- c(fitted.value.list, exp(trans.fitted.value))
latest_value <- trans.fitted.value
}
return(fitted.value.list)
}
checkMASE(c(7,5), c(6,7), diff.log.bc, log.bc)
actual_result <- read.csv("Bitcoin_Prices_Forecasts.csv")
observed <- as.numeric(actual_result$Closing.price)
checkMASE <- function(garchOrder, armaOrder, data_model, data.trans, observed)
{
model <- modelfit(garchOrder, armaOrder, data_model)
forcRes = ugarchforecast(model, data = data_model, n.ahead = 10)
predicted_result <- fitted.values(forcRes, data.trans)
print(predicted_result)
rs <- MASE(observed,predicted_result)$MASE
return(rs)
}
checkMASE(c(7,5), c(6,7), diff.log.bc, log.bc, observed)
checkMASE(c(8,5), c(6,7), diff.log.bc, log.bc, observed)
checkMASE(c(8,6), c(6,7), diff.log.bc, log.bc, observed)
residual.analysis(model = arima.617, class = "ARIMA")
res.1218 <- arima.1218$residuals
ab.res.1218 <- abs(res.1218)
# ACF and PACF plots
acf(ab.res.1218,  ci.type="ma",main="ACF plot for absolute residual series ARIMA(12,1,8)", cex.main= 1)
pacf(ab.res.1218, main="PACF plot for absolute residual series ARIMA(12,1,8)", cex.main= 1)
eacf(ab.res.1218)
sq.res.1218 <- res.1218^2
eacf(sq.res.1218)
model.1218_85 <- modelfit(c(7,5), c(12,8), diff.log.bc)
model.1218_85
model.1218_76 <- modelfit(c(7,6), c(12,8), diff.log.bc)
model.1218_91 <- modelfit(c(9,1), c(12,8), diff.log.bc)
checkMASE(c(9,1), c(12,8), diff.log.bc, log.bc, observed)
checkMASE(c(9,4), c(12,8), diff.log.bc, log.bc, observed)
checkMASE(c(7,6), c(12,8), diff.log.bc, log.bc, observed)
checkMASE(c(7,5), c(12,8), diff.log.bc, log.bc, observed)
library(tseries)
# Load libraries
library(TSA)
library(fUnitRoots)
library(forecast)
library(forecast)
library(CombMSC)
library(fGarch)
library(rugarch)
library(tseries)
arima.618 <- arima(bitcoin_ts, order = c(6,1,8))
coeftest(arima.618)
garch618_76 <- garch(arima.618$residuals, order = c(7,6))
AIC(garch618_76)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- list_GarchOrder[i]
model <- garch(data, order =garchOrder)
aic <- AIC(model)
rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame()
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- list_GarchOrder[i]
model <- garch(data, order =garchOrder)
aic <- AIC(model)
rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame()
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- list_GarchOrder[i]
model <- garch(data, order =garchOrder)
aic <- AIC(model)
print(aic)
#  rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame()
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- list_GarchOrder[i]
print(garchOrder)
model <- garch(data, order =garchOrder)
aic <- AIC(model)
print(aic)
#  rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- list_GarchOrder[i]
print(garchOrder)
model <- garch(data, order =garchOrder)
aic <- AIC(model)
print(aic)
#  rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
# garchOrder <- list_GarchOrder[i]
print(list_GarchOrder[i])
model <- garch(data, order =garchOrder)
aic <- AIC(model)
print(aic)
#  rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
list_garchOrder[1]
test <- as.vector(list_garchOrder[1])
test
garch(arima.618, test)
test <- as.numeric(list_garchOrder[1])
test <- list_garchOrder[1]
garch(arima.618, test)
AIC(garch(res.618, order = c(7,5)))
res.618 <- arima.618$residuals
AIC(garch(res.618, order = c(7,5)))
c(test)
AIC(garch(res.618, order = test))
AIC(garch(res.618, order = test[1]))
AIC(garch(res.618, order = c(7,5)))
AIC(garch(res.618, order = c(7,5)))[1]
garch618_75 = garch(res.618, order = c(7,5))
AIC(garch618_75)
garch618_75 = garch(res.618, order = c(7,5))
AIC(garch618_75)
garch618_75 = garch(res.618, order = c(7,5))
garch618_75 <- garch(res.618, order = c(7,5))
AIC(garch618_75)
garch618_75 <- garch(res.618, order = c(7,5))
AIC(garch618_75)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- list_GarchOrder[i]
print(list_GarchOrder[i])
model <- garch(data, order = garchOrder)
aic <- AIC(model)
print(aic)
#  rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- sapply(list_GarchOrder,function(x) unlist(x))[,i]
print(garchOrder)
model <- garch(data, order = garchOrder)
aic <- AIC(model)
print(aic)
#  rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- sapply(list_GarchOrder,function(x) unlist(x))[,i]
print(garchOrder)
model <- garch(data, order = garchOrder)
print(model)
aic <- AIC(model)
print(aic)
#  rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- sapply(list_GarchOrder,function(x) unlist(x))[,i]
print(garchOrder)
model <- garch(resdata, order = garchOrder)
print(model)
aic <- AIC(model)
print(aic)
#  rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- sapply(list_GarchOrder,function(x) unlist(x))[,i]
print(garchOrder)
model <- garch(resdata, order = garchOrder)
print(model)
aic <- AIC(model)
print(aic)
rbind(rs, c(as.character(garchOrder), aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- sapply(list_GarchOrder,function(x) unlist(x))[,i]
print(garchOrder)
model <- garch(resdata, order = garchOrder)
print(model)
aic <- AIC(model)
print(aic)
rbind(rs, c(garchOrder, aic))
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
rs$GarchOrder <c(1,0)
rs$GarchOrder <-c(1,0)
rs$GarchOrder <- list(c(1,0))
rs
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- sapply(list_GarchOrder,function(x) unlist(x))[,i]
print(garchOrder)
model <- garch(resdata, order = garchOrder)
print(model)
aic <- AIC(model)
print(aic)
rs$GarchOrder[i] <- list(garchOrder)
rs$AIC[i] <- aic
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
rs
rs$GarchOrder <- list(2,0)
rs$GarchOrder[2] <- list(2,0)
rs[1, ]<- list(toString(c(0,2), 123))
rs[2, ] <- list(toString(c(0,9)), 567)
rs
rs[3, ] <- list(toString(c(0,1)), 567)
rs
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- sapply(list_GarchOrder,function(x) unlist(x))[,i]
print(garchOrder)
model <- garch(resdata, order = garchOrder)
print(model)
aic <- AIC(model)
print(aic)
rs[i,] <- list(toString(garchOrder), aic)
}
return(rs)
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
sort(rs$AIC)
sortAIC_garch <- function(list_GarchOrder, resdata)
{
rs <- data.frame(matrix(ncol = 2))
colnames(rs) <- c("GarchOrder", "AIC")
for (i in 1: length(list_GarchOrder))
{
garchOrder <- sapply(list_GarchOrder,function(x) unlist(x))[,i]
print(garchOrder)
model <- garch(resdata, order = garchOrder)
print(model)
aic <- AIC(model)
print(aic)
rs[i,] <- list(toString(garchOrder), aic)
}
return(rs[order(rs$AIC),])
}
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
list_garchOrder <- list(c(7,5), c(7,6), c(8,5))
sortAIC_garch(list_garchOrder, arima.618$residuals)
list_garchOrder1218 <- list(c(7,5), c(7,6), c(8,5), c(9,1), c(8,4), c(9,4))
sortAIC_garch(list_garchOrder1218, arima.1218$residuals)
checkMASE(c(7,6), c(12,8), diff.log.bc, log.bc, observed)
checkMASE(c(7,5), c(12,8), diff.log.bc, log.bc, observed)
#This function create model and return MASE results for 10 forecasts
checkMASE <- function(model, data_model, data.trans, observed)
{
# model <- modelfit(garchOrder, armaOrder, data_model)
forcRes = ugarchforecast(model, data = data_model, n.ahead = 10)
predicted_result <- fitted.values(forcRes, data.trans)
print(predicted_result)
rs <- MASE(observed,predicted_result)$MASE
return(rs)
}
checkMASE(model.618_76, diff.log.bc, log.bc, observed)
model.618_76 <- modelfit(c(7,6), c(6,8), diff.log.bc)
model.618_85 <- modelfit(c(8,5), c(6,8), diff.log.bc)
model.1218_75 <- modelfit(c(7,5), c(12,8), diff.log.bc)
model.1218_76 <- modelfit(c(7,6), c(12,8), diff.log.bc)
model.1218_91 <- modelfit(c(9,1), c(12,8), diff.log.bc)
model.1218_84 <- modelfit(c(8,4), c(12,8), diff.log.bc)
model.1218_94 <- modelfit(c(9,4), c(12,8), diff.log.bc)
checkMASE(model.618_76, diff.log.bc, log.bc, observed)
checkMASE(model.618_75, diff.log.bc, log.bc, observed)
checkMASE(model.618_75, diff.log.bc, log.bc, observed)
checkMASE(c(8,4), c(12,8), diff.log.bc, log.bc, observed)
checkMASE(model.1218_84, diff.log.bc, log.bc, observed)
forcRes = ugarchforecast(model.618_76, data = data_model, n.ahead = 10)
data.frame(fitted.values(forcRes, log.bc))
checkMASE(model.1218_85, diff.log.bc, log.bc, observed)
model.1218_85<- modelfit(c(8,5), c(12,8), diff.log.bc)
model.1218_85
checkMASE(model.1218_85, diff.log.bc, log.bc, observed)
plot(model.618_76)
par(mfrow=c(1,2))
plot(model.618_76)
plot(model.618_85)
plot(model.1218_75)
plot(model.1218_85)
plot(model.1218_76)
forcRes = ugarchforecast(model.618_76, data = data_model, n.ahead = 10)
forcRes = ugarchforecast(model.618_76, data = data_model, n.ahead = 10, n.roll = 10)
plot(forcRes, which = "all")
plot(model.618_85)
plot(model.1218_85)
plot(model.1218_85)
plot(model.1218_76)
